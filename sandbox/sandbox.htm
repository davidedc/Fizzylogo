<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>Fizzylogo sandbox</title>

  <link rel="stylesheet" href="./CodeMirror_files/docs.css">

  <link rel="stylesheet" href="./CodeMirror_files/codemirror.css">
  <script src="./CodeMirror_files/codemirror.js"></script>
  <script src="./CodeMirror_files/matchbrackets.js"></script>
  <script src="./CodeMirror_files/python.js"></script>
  <script src="./fizzylogo.js"></script>
  <style type="text/css">.CodeMirror {border: 1px solid black;}</style>
</head>

<body style="">
<div id="nav">
  <a href="http://google.com/"><h1>Fizzylogo</h1><img id="logo" src="./CodeMirror_files/logo.png"></a>

  <ul>
    <li><a href="http://google.com/">Link 1</a>
    </li><li><a href="http://google.com/">Link 2</a>
    </li><li><a href="http://google.com/">Link 3</a>
  </li></ul>
  <ul>
    <li><a href="http://google.com/">Link 4</a>
    </li><li><a class="active" href="http://google.com/">Link 5</a>
  </li></ul>
</div>

<article>
<h2>Fizzylogo</h2>

<select id="examplesList" onchange="loadExample()">
  <option value="helloWorld">hello world</option>
  <option value="printForever">print forever</option>
  <option value="20DigitsOfPi">20 digits of pi</option>
  <option value="factorial">factorial</option>
  <option value="PythagoreanTriplets">Pythagorean Triplets</option>
  <option value="FizzBuzz">FizzBuzz</option>
  <option value="NonExistingMessage">Non-existing message</option>
  <option value="Star">Star</option>
</select>
<div>

  <!-- left part, with code input and control buttons -->
  <div style="width: 49%; float: left;" >
    <textarea id="code" name="code" style="display: none;"></textarea>
    <button id="runAll"         onclick="return runAll();"        > run            </button>
    <button id="runSelection"   onclick="return runSelection();"  > run selection  </button>
    <button id="pauseOrRestart" onclick="return pauseOrRestart();"> pause          </button>
    <button id="stop"           onclick="return stop();"          > stop           </button>
  </div>


  <!-- right part, with the canvas and text output -->
  <div style="width: 49%; float: right;">

    <div style="position: relative;">
      <textarea id="output" name="output" rows="23" cols="80" style="width:100%;margin-bottom:-5px; background:transparent;"></textarea>

      <!-- we put the turtle canvas absolutely positioned in respect to the parent div
      (the parent div must have the position:relative in order for this to work)
      and UNDER the output textarea. So it's basically just peeking through the
      output textarea. Might need a workaround in case we want to get pointer
      events from the canvas but we'll sort that out if/when we come to it. -->
      <div style="position: absolute; z-index: -1; left:0px; top:0px;">
        <canvas id="turtlesCanvas" width="330" height="326" ></canvas>
      </div>

    </div>
    <button id="clearOutput"           onclick="return clearOutput();"          > clear           </button>



  </div>

</div>


<script>

loadExample = function(){
  var selected = document.getElementById("examplesList").selectedIndex;
  if (selected == 0) {
    editor.setValue('console print "hello world"');
  }
  else if (selected == 1) {
    editor.setValue('repeat forever:\n  console print "running"');
  }
  else if (selected == 2) {
    editor.setValue('// 20 digits of pi using Jeremy Gibbons\'s unbounded spigot\n// streaming algorithm. Can\'t go beyond 20 because\n// Javascript\'s Number precision. (only a bigint\n// representation could go on "forever")\n\nq = 1\nr = 0\nt = 1\nk = 1\nn = 3\nl = 3\nrepeat 82:\n  if ((r-t)+4*q) < (n*t):\n    console print n\n    nr = 10*(r-n*t)\n    n = ((10*(r+3*q)) /_ t) - 10*n\n    q *= 10\n    r = nr\n  else:\n    nr = (r+2*q) * l\n    nn = ((q*(2+7*k))+r*l) /_ (t*l)\n    q *= k\n    t *= l\n    l += 2\n    k += 1\n    n = nn\n    r = nr\nconsole print " done!"');
  }
  else if (selected == 3) {
    editor.setValue("Number answer:\n    factorial\n  by:\n    if self == 0:\n      return 1\n    else:\n      return (self - 1) factorial * self\nconsole print 3 factorial");
  }
  else if (selected == 4) {
    editor.setValue("for each c in: (1...10) do:\n  for each b in: (1...c) do:\n    for each a in: (1...b) do:\n      if ((a * a) + (b * b)) == (c * c):\n        console print \"a: \" + a + \" b: \" + b + \" c: \" + c");
  }
  else if (selected == 5) {
    editor.setValue("for each i in: (1...100) do:\n  if 0 == i % 15:\n    console print \"FizzBuzz \"\n  else if 0 == i % 3:\n    console print \"Fizz \"\n  else if 0 == i % 5:\n    console print \"Buzz \"\n  else:\n    console print i + \" \"");
  }
  else if (selected == 6) {
    editor.setValue("2 nonExistingMessage");
  }
  else if (selected == 7) {
    editor.setValue("for each n in:\n    0...5\n  do:\n    turtle forward 50\n    turtle right 144");
  }


}

clearOutput = function(){
  document.getElementById("output").value = "output ------------\n";
  canvas = document.getElementById("turtlesCanvas");
  canvasContext = canvas.getContext("2d");
  canvasContext.clearRect(0, 0, canvas.width, canvas.height);
}

var paused = false;
var gen = null;
var timeoutNextStep = null;

// mechanism to batch a certain number of
// instructions to be run consecutively,
// otherwise we spend most of the browser's
// time doing nothing.
var instructionsCount = 0;
var instructionsBatch = 100;

pauseOrRestart = function(){
  if (!paused){
    paused = true;
    document.getElementById("pauseOrRestart").textContent = "restart";
    clearTimeout(timeoutNextStep);
    timeoutNextStep = null;
  }
  else {
    paused = false
    document.getElementById("pauseOrRestart").textContent = "pause";
    runFollowingSteps(gen);
  }
}

stop = function(){
  paused = false;
  document.getElementById("pauseOrRestart").textContent = "pause";
  disablePauseAndStopButtons();
  clearTimeout(timeoutNextStep);
  timeoutNextStep = null;
}

checkIfEmptySelection = function(){
  console.log("checking selection");
  if (editor.getSelection() == "") {
    document.getElementById("runSelection").disabled = true;
  }
  else {
    document.getElementById("runSelection").disabled = false;
  }
}

// have to givi it some time to get the proper content
// of the selection
checkInAMomentIfEmptySelection = function(){
  setTimeout(function(){ checkIfEmptySelection(); }, 10);
}

var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
  mode: {name: "python",
         version: 3,
         singleLineStringErrors: false},
  lineNumbers: true,
  indentUnit: 2,
  matchBrackets: true
});
editor.on("beforeSelectionChange", checkInAMomentIfEmptySelection);

disablePauseAndStopButtons = function(){
  document.getElementById("pauseOrRestart").disabled = true;
  document.getElementById("stop").disabled = true;
}

enablePauseAndStopButtons = function(){
  document.getElementById("pauseOrRestart").disabled = false;
  document.getElementById("stop").disabled = false;
}


disablePauseAndStopButtons();
document.getElementById("runSelection").disabled = true;
Fizzylogo.init(document.getElementById("output"), document.getElementById("turtlesCanvas"));
clearOutput();
loadExample();

runAll = function(){
  stop();

  gen = Fizzylogo.runOneStep(editor.getValue());
  runFollowingSteps(gen);
}

runSelection= function(){
  stop();

  gen = Fizzylogo.runOneStep(editor.getSelection());
  runFollowingSteps(gen);
}

runFollowingSteps = function(gen){
  // keep immediately running instructions until either
  // a) we are done or b) we reached the batch size of
  // the instructions to run, in which case we keep
  // running more after a timeout.
  while (true) {
    done = gen.next().done;
    instructionsCount++;
    if (done) {
      disablePauseAndStopButtons();
      break;
    }
    else {
      enablePauseAndStopButtons();
      if (!paused) {
        if (instructionsCount % instructionsBatch == 0) {
          //console.log("instructionsCount " + instructionsCount + " waiting");
          timeoutNextStep = setTimeout(function(){ runFollowingSteps(gen); }, 0);
          break;
        }
      }
    }
  }
}


</script>



  </article>
</body>
</html>